Features:
1) node cut.js -d : -f 2 fileToCut.txt
2) cat fileToCut.txt | node cut.js -d : -f 2
3) node cut.js -d : -f 2,3,4 fileToCut.txt
4) cat fileToCut.txt | node cut.js -d : -f 2,3,4
5) node cut.js -f 2 fileToCut.txt
6) cat fileToCut.txt | node cut.js -f 2
7) node cut.js -f 2,3,4 fileToCut.txt
8) cat fileToCut.txt | node cut.js -f 2,3,4
9) node cut.js -d : -f 2 file1.txt file2.txt


cat fileToCut.txt | node cut.js -f 2-4
node cut.js -f 2-4 fileToCut.txt
node cut.js -d : -f 2-4 fileToCut.txt
cat fileToCut.txt | node cut.js -d : -f 2-4
node cut.js -b 2 fileToCut.txt
node cut.js -b 2,3,4 fileToCut.txt
cat fileToCut.txt | node cut.js -b 2
cat fileToCut.txt | node cut.js -b 2,3,4
node cut.js -c 2,3,4 fileToCut.txt
node cut.js -c 2 fileToCut.txt
cat fileToCut.txt | node cut.js -c 2
cat fileToCut.txt | node cut.js -c 2,3,4
node cut.js -d : -f -2 fileToCut.txt
node cut.js -d : -f 2- fileToCut.txt
node cut.js -f 2- fileToCut.txt
node cut.js -f -2 fileToCut.txt
cat fileToCut.txt | node cut.js -f 2-
cat fileToCut.txt | node cut.js -f -2
cat fileToCut.txt | node cut.js -d : -f 2-
cat fileToCut.txt | node cut.js -d : -f -2
node cut.js -d : -s -f 2 fileToCut.txt
node cut.js -d : -s -f 2,3,4 fileToCut.txt
node cut.js -d : -s -f 2-4 fileToCut.txt
node cut.js -d : -s -f 2- fileToCut.txt
node cut.js -d : -s -f -2 fileToCut.txt
cat fileToCut.txt | node cut.js -d : -s -f 2,3,4
cat fileToCut.txt | node cut.js -d : -s -f 2-4
cat fileToCut.txt | node cut.js -d : -s -f 2-
cat fileToCut.txt | node cut.js -d : -s -f -2


content of fileToCut1.txt
hello:hi
hi:hello
step:7
step 7
step\t7

content of fileToCut2.txt
assignment:jsTools
step:7

--- individual flows ---
== (1) flow for 'cut -d : -f 2 fileToCut.txt' ==
a. zero as range
b. no file
c. should take 1st range if multiple is given
d. option value is not present

Requirement:
node cut.js -d : -f 2 fileToCut1.txt fileToCut2.txt
hi
hello
7
step 7
step\t7
jsTools
7

  [1.1a] The last step
  output => text: cutLines
      hi
      hello
      7
      step 7
      step\t7
      jsTools
      7
  input => arrayOfStrings: extractedFieldsOfLines
      [extractedFromLine1,extractedFromLine2,extractedFromLine3,extractedFromLinen]
  name => joinLines

  [1.1b] 
  output => text: errorMessage
      'cut: [-cf] list: illegal list value'
  input => errorObject
  name => generateErrorMessage

  [1.2]
  output => arrayOfStrings: extractedFieldsOfLines or errorObject
      [extractedFromLine1,extractedFromLine2,extractedFromLine3,extractedFromLinen]
  input => arrayOfString: lines, arrayOfStrings: cutOptions
      [line1,line2,line3,linen], ['-d',':','-f','2']
  name => extractFieldsOfEachLine
  [Note: It will extract fields if the given field range is positive number and non zero]
  [Note: Splits if the range is separated with comma. ex: 1,2,3]

  [1.3] 
  output => arrayOfStrings: lines
      [line1,line2,line3,linen]
  input => string: fileContent/stdinContent
      'line1\nline2\nlineN'
  name => parseContent

  [1.4a]
  output => string: fileContent or errorObject
      'line1\nline2\nlineN' or 'cut: file: No such file or directory'
  input => string: filename
      'fileToCut1.txt,fileToCut2.txt'
  name => loadFileContent

  [1.4b]
  output => string: stdinContent
      'line1\nline2\nlineN'
  input => stdin
  name => loadStdinContent

  [1.5a]
  output => string: filename
      'fileToCut1.txt,fileToCut2.txt'
  input => arrayOfStrings: options
      ['-d',':','-f','2','fileToCut1.txt','fileToCut2.txt']
  name => readFileNames

  [1.5b]
  output => arrayOfStrings: cutOptions
      ['-d',':','-f','2']
  input => arrayOfStrings: options
      ['-d',':','-f','2','fileToCut.txt']
  name => readCutOptions
  [Note: Sets delimiter as tab if delimiter is not given]
  [Note: It takes the first range only]

  [1.6]
  output => arrayOfStrings: options
      ['-d',':','-f','2','fileToCut.txt']
  input => arrayOfStrings: cmdLineArgs
      ['node','cut.js','-d',':','-f','2','fileToCut1.txt','fileToCut2.txt']
  name => filterUserOptions